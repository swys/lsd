{
  "name": "watercolor",
  "version": "0.0.1",
  "description": "Watercolor is a Stream 2 Transform stream that will output styled and colored text. Pipe a stream or write to it directly. Outputted text will be formatted based on the options passed into the instance. Change style and color option anytime using the .color and .style methods...also these methods are chainable.",
  "main": "watercolor.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/run.js"
  },
  "keywords": [
    "color stream",
    "streams2",
    "color log",
    "console",
    "color console",
    "styled output",
    "underline text",
    "color text"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/swys/watercolor.git"
  },
  "homepage": "https://github.com/swys/watercolor",
  "author": {
    "name": "Kevin Carroll",
    "email": "abacus822@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "readme": "watercolor\n==========\n\nA very simple transform stream that outputs text streams to the console with color and style. You can either pipe in a readable stream or write to it directly.\n\nwatercolor uses Node's `Streams 2` API to do its dirty work!\n\ninstall\n=======\n\n`npm install watercolor`\n\nexample\n=======\n\n####Write directly to it :\n\n\n```\nvar Watercolor = require('watercolor'),\n    watercolor = Watercolor({\n        style : 'normal',\n        color : 'red'\n    });\n    \nwatercolor.write(\"Hello\\n\");\nwatercolor.end(\"World\\n\");\nwatercolor.pipe(process.stdout);\n```\n\nThe call to `watercolor.write` will output __*Hello*__ in red text with no styling to the console and insert a line break.\n\nThe call to `watercolor.end` will output __*World*__ in red text with no styling to the console, insert a line break, and finally end the stream. goodbye!\n\n####Pipe a readable stream to it :\n \n\n```\nvar Watercolor = require('watercolor'),\n    watercolor({\n        style : 'underline',\n        color : 'yellow'\n    }),\n    fs = require('fs'),\n    readableStream = fs.createReadStream('./path/to/file');\n\nreadableStream.pipe(watercolor).pipe(process.stdout);\n```\n\nThe above code will send all of the contents of `readableStream` into `watercolor` and `watercolor` will output the text to `process.stdout` underlined with yellow text.\n\nusage\n=======\nI've mainly been using this in my test runner to output a colored Summery report so I can easily see if tests pass/fail by color.\nYou can hook this into `child_process` `stdout` and `stderr` to get realtime color queues if there are errors occurring with the other node processess you are running.\n\n#####Color seperate `child_process.stdout` and `child_process.stderr`\n\n```\nvar Watercolor = require('watercolor'),\n    errTxt = watercolor({\n        color : 'error'\n    }),\n    successTxt = watercolor({\n        color : 'success'\n    }),\n    spawn = require('child_process').spawn(),\n    child = spawn('node', ['myChild.js']);\n    \nchild.process.stderr.write(\"Something went wrong! I will print in RED\\n\");\nchild.process.stdout.write(\"I\\'m just doing what I should be doing, and in GREEN\\n\");\n\nchild.stdout.pipe(successTxt).pipe(process.stdout);\nchild.stderr.pipe(errTxt).pipe(process.stdout);\n\nchild.on('exit', function(exitcode) {\n    (exitcode ? errTxt : successTxt).write(\"Ended with exitcode : \" + exitcode);\n});\n```\n\nThe above code will format the child's `stdout` to print `green` text out to the console.\n\nChild's `stderr` will be formatted as `red` text out to the console.\n\nThe `exitcode` statement will print either `green` or `red` depending on the outcome.\n\n*Note :*\n\n`success` is mapped to the color green.\n\n\n`error` is mapped to `red`.\n\n\n`warn` is mapped to `yellow`.\n\nAnother possible use case would be to color seperate I/O from different sources. Like if you have multipe Databases you can color seperate the log output to make it easier to see what is going on with your application.\n\noptions\n=======\n\nYou can initialize watercolor with an options object containing `color` and/or `style`.\n\n#####example\n\n```\nvar watercolor = require('watercolor'),\n    greenText = watercolor({\n        color : 'green',\n        style : 'underline'\n    });\n\ngreenText.write(\"This text will be green and also underlined!\\n\");\n```\n\n##.color() method\n\nThis method takes a `string` argument. Simply pass in the color you want to change to.\n\n#####example\n`watercolor.color('blue');`\n\n*Note :*\n\nPassing in `'normal'` to this method will set color back to your default text color.\n\n##.style() method\n\nThis method takes a `string` argument. Simply pass in the style you want to change to.\n\n#####example\n`watercolor.style('underline');`\n\n*Note :*\n\nPassing in `'normal'` to this method will set color back to your default style...which is no style.\n\n##Chainable API\n\nThese methods are chainable so you do stuff like :\n\n`watercolor.color('green').style('blink');`\n\nThis will change the color to `green` and style to `blink`\n\n`watercolor.color('red');`\n\nThis will change the color to `red` and style still be `blink`\n\n`watercolor.color('yellow').style('normal');`\n\nThis is change the color to `yellow` and change the style to `normal` or no style.\n\n##available colors\n\n`black` `white` `red` `green` `gray`\n\n`yellow` `blue` `cyan` `magenta`\n\n`normal` `success` `warn` `error`\n\n##available styles\n\n`underline` `blink` `normal`\n\n*Note :*\n\nI realize that there are a few other options such as `bold` or `italic` that I've seen elsewhere but when I tested them on my computer (Mac OSX Lion) they did not work. I didn't want to put anything in here that I could not test myself. If you know of any colors or styles that do work and should be included please feel free to file an issue.\n\ntests\n=======\n\n`npm test`\n\nLook in the test directory for some more details\n\nlicense\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/swys/watercolor/issues"
  },
  "_id": "watercolor@0.0.1",
  "dist": {
    "shasum": "c7418a928926338a5ea7b1af4eca11da5378f0bc"
  },
  "_from": "watercolor@0.0.1",
  "_resolved": "https://registry.npmjs.org/watercolor/-/watercolor-0.0.1.tgz"
}
